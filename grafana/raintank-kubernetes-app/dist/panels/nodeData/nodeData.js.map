{"version":3,"sources":["../../../src/panels/nodeData/nodeData.js"],"names":["slugify","str","slug","replace","unslugify","moment","PanelCtrl","_","NodeStatsDatasource","panelDefaults","NodeDataCtrl","$scope","$injector","backendSrv","datasourceSrv","$location","alertSrv","timeSrv","variableSrv","defaults","panel","templateVariables","variables","nodeStatsDatasource","document","title","pageReady","cluster","clusterDS","node","isInListMode","nodes","loadCluster","find","set","cluster_id","current","value","nodeVar","node_name","graphiteDs","loadDatasource","then","getNodeStats","getNodes","map","healthState","getNodeHealth","updateNodeWithStats","nodeStats","getNode","health","message","forEach","status","conditions","condition","type","getHealthState","text","iconClass","stateClass","id","get","filter","result","ds","name","variable","metadata","variableUpdated","$emit","$root","$broadcast","conditionStatus","lastTransitionTime","format","templateUrl"],"mappings":"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","file":"nodeData.js","sourcesContent":["import moment from 'moment';\nimport {PanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport NodeStatsDatasource from './nodeStats';\n\nconst panelDefaults = {\n};\n\nexport class NodeDataCtrl extends PanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, datasourceSrv, $location, alertSrv, timeSrv, variableSrv) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n    this.alertSrv = alertSrv;\n    this.timeSrv = timeSrv;\n    this.variableSrv = variableSrv;\n    this.templateVariables = this.variableSrv.variables;\n    this.nodeStatsDatasource = new NodeStatsDatasource(datasourceSrv, timeSrv);\n    document.title = 'Grafana Kubernetes App';\n\n    this.pageReady = false;\n    this.cluster = {};\n    this.clusterDS = {};\n    this.node = {};\n\n    this.isInListMode = false;\n    this.nodes = [];\n\n    this.loadCluster();\n  }\n\n  loadCluster() {\n    const cluster = _.find(this.templateVariables, {'name': 'cluster'});\n    if (!cluster) {\n      this.alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    } else {\n      const cluster_id = cluster.current.value;\n      const nodeVar = _.find(this.templateVariables, {'name': 'node'});\n      const node_name  = nodeVar.current.value !== '$__all' ? nodeVar.current.value : 'All';\n      const graphiteDs  = _.find(this.templateVariables, {'name': 'datasource'}).current.value;\n\n      this.loadDatasource(cluster_id).then(() => {\n        return this.nodeStatsDatasource.getNodeStats(cluster_id, graphiteDs);\n      }).then(nodeStats => {\n        if (node_name === 'All') {\n          this.isInListMode = true;\n          this.clusterDS.getNodes().then(nodes => {\n            this.nodes = _.map(nodes, node => {\n              node.healthState = this.getNodeHealth(node);\n              this.nodeStatsDatasource.updateNodeWithStats(node, nodeStats);\n\n              return node;\n            });\n          });\n        } else {\n          this.isInListMode = false;\n          this.clusterDS.getNode(unslugify(node_name)).then(node => {\n            this.node = node;\n            this.pageReady = true;\n          });\n        }\n      });\n    }\n  }\n\n  getNodeHealth(node) {\n    let health = \"unhealthy\";\n    let message = '';\n    _.forEach(node.status.conditions, condition => {\n      if (condition.type   === \"Ready\" &&\n          condition.status === \"True\") {\n        health = \"ok\";\n      } else {\n        message = condition.message;\n      }\n    });\n    return this.getHealthState(health, message);\n  }\n\n  getHealthState(health, message) {\n    switch (health) {\n      case 'ok': {\n        return {\n          text: 'OK',\n          iconClass: 'icon-gf icon-gf-online',\n          stateClass: 'alert-state-ok'\n        };\n      }\n      case 'unhealthy': {\n        return {\n          text: 'UNHEALTHY',\n          iconClass: 'icon-gf icon-gf-critical',\n          stateClass: 'alert-state-critical',\n          message: message || ''\n        };\n      }\n      case 'warning': {\n        return {\n          text: 'warning',\n          iconClass: \"icon-gf icon-gf-critical\",\n          stateClass: 'alert-state-warning',\n          message: message || ''\n        };\n      }\n    }\n  }\n\n  refresh() {\n    this.loadCluster();\n  }\n\n  loadDatasource(id) {\n    return this.backendSrv.get('api/datasources')\n      .then(result => {\n        return _.filter(result, {\"type\": \"raintank-kubernetes-datasource\", \"name\": id})[0];\n      })\n      .then(ds => {\n        if (!ds) {\n          this.alertSrv.set(\"Failed to connect\", \"Could not connect to the specified cluster.\", 'error');\n          throw \"Failed to connect to \" + id;\n        }\n        this.cluster = ds;\n        return this.datasourceSrv.get(ds.name);\n      }).then(clusterDS => {\n        this.clusterDS = clusterDS;\n        return clusterDS;\n      });\n  }\n\n  goToNodeDashboard(node) {\n    const variable = _.find(this.templateVariables, {'name': 'node'});\n    variable.current.text = node === 'All' ? 'All': slugify(node.metadata.name);\n    variable.current.value = node === 'All' ? '$__all': slugify(node.metadata.name);\n\n    this.variableSrv.variableUpdated(variable).then(() => {\n      this.$scope.$emit('template-variable-value-updated');\n      this.$scope.$root.$broadcast('refresh');\n    });\n  }\n\n  conditionStatus(condition) {\n    var status;\n    if (condition.type === \"Ready\") {\n      status = condition.status === \"True\";\n    } else {\n      status = condition.status === \"False\";\n    }\n\n    return {\n      value: status,\n      text: status ? \"Ok\" : \"Error\"\n    };\n  }\n\n  isConditionOk(condition) {\n    return this.conditionStatus(condition).value;\n  }\n\n  conditionLastTransitionTime(condition) {\n    return moment(condition.lastTransitionTime).format('YYYY-MM-DD HH:mm:ss');\n  }\n}\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(/[.]/g, \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n\nfunction unslugify(str) {\n  var slug = str.replace(/[_]/g, \".\");\n  return slug;\n}\n\nNodeDataCtrl.templateUrl = 'panels/nodeData/partials/node_info.html';\n"]}