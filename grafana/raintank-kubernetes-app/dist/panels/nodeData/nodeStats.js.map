{"version":3,"sources":["../../../src/panels/nodeData/nodeStats.js"],"names":["slugify","str","slug","replace","kbn","_","NodeStatsDatasource","datasourceSrv","timeSrv","graphiteDs","query","get","then","datasource","metricsQuery","range","timeRange","rangeRaw","raw","interval","intervalMs","targets","refId","target","format","maxDataPoints","result","data","cluster_id","podsPerNode","cpuPerNode","memoryPerNode","podQuery","cpuQuery","memoryQuery","issueGraphiteQuery","node","nodeStats","formatFunc","valueFormats","nodeName","metadata","name","podsUsedData","find","podsUsed","last","datapoints","podsUsedPerc","status","capacity","pods","cpuData","cpuUsage","cpuUsageFormatted","cpuUsagePerc","cpu","memData","memoryUsage","memCapacity","memory","substring","length","memUsageFormatted","memCapacityFormatted","memoryUsagePerc"],"mappings":"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","file":"nodeStats.js","sourcesContent":["import kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\n\nexport default class NodeStatsDatasource {\n  constructor(datasourceSrv, timeSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  issueGraphiteQuery(graphiteDs, query) {\n    return this.datasourceSrv.get(graphiteDs)\n      .then((datasource) => {\n        var metricsQuery = {\n          range: this.timeSrv.timeRange(),\n          rangeRaw: this.timeSrv.timeRange().raw,\n          interval: this.interval,\n          intervalMs: this.intervalMs,\n          targets: [\n            {\n              refId: 'A',\n              target: query\n            }\n          ],\n          format: 'json',\n          maxDataPoints: 1000,\n        };\n\n        return datasource.query(metricsQuery);\n      }).then((result) => {\n        if (result && result.data) {\n          return result.data;\n        }\n\n        return {};\n      });\n  }\n\n  getNodeStats(cluster_id, graphiteDs) {\n    let podsPerNode, cpuPerNode, memoryPerNode;\n\n    const podQuery = 'aliasByNode(keepLastValue(groupByNode(snap.' + cluster_id\n      + \".grafanalabs.kubestate.pod.*.*.*.status.phase.Running, 6, 'sum'), 100), 0)\";\n    const cpuQuery = 'aliasByNode(keepLastValue(groupByNode(snap.' + cluster_id\n      + \".grafanalabs.kubestate.container.*.*.*.*.requested.cpu.cores, 6, 'sum'), 100), 0)\";\n    const memoryQuery = 'aliasByNode(keepLastValue(groupByNode(snap.' + cluster_id\n      + \".grafanalabs.kubestate.container.*.*.*.*.requested.memory.bytes, 6, 'sum'), 100), 0)\";\n\n    return this.issueGraphiteQuery(graphiteDs, podQuery)\n      .then(data => {\n        podsPerNode = data;\n        return;\n      }).then(() => {\n        return this.issueGraphiteQuery(graphiteDs, cpuQuery);\n      })\n      .then(data => {\n        cpuPerNode = data;\n        return;\n      }).then(() => {\n        return this.issueGraphiteQuery(graphiteDs, memoryQuery);\n      })\n      .then(data => {\n        memoryPerNode = data;\n        return {podsPerNode, cpuPerNode, memoryPerNode};\n      });\n  }\n\n  updateNodeWithStats(node, nodeStats) {\n    var formatFunc = kbn.valueFormats['percentunit'];\n    const nodeName = slugify(node.metadata.name);\n    const podsUsedData = _.find(nodeStats.podsPerNode, {'target': nodeName});\n    if (podsUsedData) {\n      node.podsUsed = _.last(podsUsedData.datapoints)[0];\n      node.podsUsedPerc = formatFunc(node.podsUsed / node.status.capacity.pods, 2, 5);\n    }\n\n    const cpuData = _.find(nodeStats.cpuPerNode, {'target': nodeName});\n    if (cpuData) {\n      node.cpuUsage = _.last(cpuData.datapoints)[0];\n      node.cpuUsageFormatted = kbn.valueFormats['none'](node.cpuUsage, 2, null);\n      node.cpuUsagePerc = formatFunc(node.cpuUsage / node.status.capacity.cpu, 2, 5);\n    }\n\n    const memData = _.find(nodeStats.memoryPerNode, {'target': nodeName});\n    if (memData) {\n      node.memoryUsage = _.last(memData.datapoints)[0];\n      const memCapacity = node.status.capacity.memory.substring(0, node.status.capacity.memory.length - 2)  * 1000;\n      node.memUsageFormatted = kbn.valueFormats['bytes'](node.memoryUsage, 2, null);\n      node.memCapacityFormatted = kbn.valueFormats['bytes'](memCapacity, 2, null);\n      node.memoryUsagePerc = formatFunc((node.memoryUsage / memCapacity), 2, 5);\n    }\n\n    return node;\n  }\n}\n\nfunction slugify(str) {\n  var slug = str.replace(\"@\", \"at\").replace(\"&\", \"and\").replace(/[.]/g, \"_\").replace(\"/\\W+/\", \"\");\n  return slug;\n}\n"]}