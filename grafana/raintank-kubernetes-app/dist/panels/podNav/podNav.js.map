{"version":3,"sources":["../../../src/panels/podNav/podNav.js"],"names":["PanelCtrl","_","panelDefaults","PodNavCtrl","$scope","$injector","backendSrv","datasourceSrv","$location","alertSrv","variableSrv","$q","defaults","panel","templateVariables","variables","namespace","currentTags","currentPods","selectedPods","setDefaults","loadTags","chosenTags","needsRefresh","cluster","find","ns","clusterName","current","value","getCluster","then","getPods","parseTagsFromPods","pods","uniq","map","p","metadata","name","set","podVariable","isArray","length","promises","forEach","push","clusterDS","all","flatten","filter","n","getPodsByName","pod","labels","label","includes","removeEmptyTags","getPodsByLabel","updateTemplateVariableWithPods","variable","text","join","isEmpty","updateOptions","variableUpdated","$emit","$root","$broadcast","omitBy","val","get","result","ds","jsonData","tag","podName","remove","templateUrl"],"mappings":"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","file":"podNav.js","sourcesContent":["import {PanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\n\nconst panelDefaults = {\n};\n\nexport class PodNavCtrl extends PanelCtrl {\n  constructor($scope, $injector, backendSrv, datasourceSrv, $location, alertSrv, variableSrv, $q) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n\n    this.backendSrv = backendSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$location = $location;\n    this.alertSrv = alertSrv;\n    this.variableSrv = variableSrv;\n    this.$q = $q;\n\n    this.templateVariables = this.variableSrv.variables;\n    this.namespace = \"All\";\n    this.currentTags = {};\n    this.currentPods = [];\n    this.selectedPods = [];\n\n    this.setDefaults();\n    this.loadTags();\n    this.chosenTags = {};\n  }\n\n  refresh() {\n    if (this.needsRefresh()) {\n      this.currentTags = {};\n      this.currentPods = [];\n      this.chosenTags = {};\n      this.selectedPods = [];\n\n      this.setDefaults();\n      this.loadTags();\n    }\n  }\n\n  needsRefresh() {\n    const cluster = _.find(this.templateVariables, {'name': 'cluster'});\n    const ns = _.find(this.templateVariables, {'name': 'namespace'});\n\n    if (this.clusterName !== cluster.current.value) { return true; }\n\n    if ((ns.current.value === '$__all' || ns.current.value[0] === '$__all')\n      && (this.namespace === ns.current.value || this.namespace === '')) {\n      return false;\n    }\n\n    if (ns.current.value !== this.namespace) { return true; }\n\n    return false;\n  }\n\n  loadTags() {\n    this.getCluster().then(() => {\n      return this.getPods().then(pods => {\n        this.parseTagsFromPods(pods);\n        this.currentPods = _.uniq(_.map(pods, p => { return p.metadata.name; }));\n      });\n    });\n  }\n\n  setDefaults() {\n    const cluster = _.find(this.templateVariables, {'name': 'cluster'});\n    if (!cluster) {\n      this.alertSrv.set(\"no cluster specified.\", \"no cluster specified in url\", 'error');\n      return;\n    }\n\n    const ns = _.find(this.templateVariables, {'name': 'namespace'});\n    this.namespace = ns.current.value !== '$__all' && ns.current.value[0] !== '$__all' ? ns.current.value : '';\n    const podVariable = _.find(this.templateVariables, {'name': 'pod'});\n\n    if (podVariable.current.value !== '$__all') {\n      this.selectedPods = _.isArray(podVariable.current.value) ? podVariable.current.value : [podVariable.current.value];\n    }\n  }\n\n  getPods() {\n    if (this.currentPods.length === 0) {\n      if (_.isArray(this.namespace)) {\n        const promises = [];\n        _.forEach(this.namespace, ns => {\n          promises.push(this.clusterDS.getPods(ns));\n        });\n        return this.$q.all(promises)\n        .then(pods => {\n          return _.flatten(pods).filter(n => n);\n        });\n      } else {\n        return this.clusterDS.getPods(this.namespace);\n      }\n    } else {\n      return this.clusterDS.getPodsByName(this.currentPods);\n    }\n  }\n\n  parseTagsFromPods(pods) {\n    this.currentTags = {};\n\n    _.forEach(pods, pod => {\n      _.forEach(pod.metadata.labels, (value, label) => {\n        if (!this.currentTags[label]) {\n          this.currentTags[label] = [];\n        }\n        if (!this.currentTags[label].includes(value)) {\n          this.currentTags[label].push(value);\n        }\n      });\n    });\n  }\n\n  onTagSelect() {\n    this.removeEmptyTags();\n    this.selectedPods = [];\n\n    this.getPodsByLabel()\n    .then(pods => {\n      this.currentPods = _.uniq(_.map(pods, p => { return p.metadata.name; }));\n      this.parseTagsFromPods(pods);\n      this.updateTemplateVariableWithPods();\n    });\n  }\n\n  getPodsByLabel() {\n    if (_.isArray(this.namespace)) {\n      const promises = [];\n      _.forEach(this.namespace, ns => {\n        promises.push(this.clusterDS.getPodsByLabel(ns, this.chosenTags));\n      });\n      return this.$q.all(promises)\n      .then(pods => {\n        return _.flatten(pods).filter(n => n);\n      });\n    } else {\n      return this.clusterDS.getPodsByLabel(this.namespace, this.chosenTags);\n    }\n  }\n\n  updateTemplateVariableWithPods() {\n    const variable = _.find(this.templateVariables, {'name': 'pod'});\n\n    if (this.selectedPods.length > 0) {\n      variable.current.text = this.selectedPods.join(' + ');\n      variable.current.value = this.selectedPods;\n    } else {\n      variable.current.text = _.isEmpty(this.chosenTags) ? 'All': this.currentPods.join(' + ');\n      variable.current.value = _.isEmpty(this.chosenTags) ? '$__all': this.currentPods;\n    }\n\n    this.variableSrv.updateOptions(variable).then(() => {\n      this.variableSrv.variableUpdated(variable).then(() => {\n        this.$scope.$emit('template-variable-value-updated');\n        this.$scope.$root.$broadcast('refresh');\n      });\n    });\n  }\n\n  removeEmptyTags() {\n    this.chosenTags = _.omitBy(this.chosenTags, val => { return !val;});\n  }\n\n  getCluster() {\n    const clusterName = _.find(this.templateVariables, {'name': 'cluster'}).current.value;\n    this.clusterName = clusterName;\n\n    return this.backendSrv.get('/api/datasources')\n    .then(result => {\n      return _.filter(result, {\"name\": clusterName})[0];\n    })\n    .then((ds) => {\n      if (!ds) {\n        this.alertSrv.set(\"Failed to connect\", \"Could not connect to the specified cluster.\", 'error');\n        throw \"Failed to connect to \" + clusterName;\n      }\n\n      if (!(ds.jsonData.ds)) {\n        ds.jsonData.ds = \"\";\n      }\n      return this.datasourceSrv.get(ds.name);\n    }).then(clusterDS => {\n      this.clusterDS = clusterDS;\n    });\n  }\n\n  removeTag(tag) {\n    delete this.chosenTags[tag];\n    this.getPodsByLabel()\n    .then(pods => {\n      this.currentPods = _.uniq(_.map(pods, p => { return p.metadata.name; }));\n      this.parseTagsFromPods(pods);\n      this.updateTemplateVariableWithPods();\n    });\n  }\n\n  selectPod(podName) {\n    this.chosenTags = {};\n\n    if (!this.selectedPods.includes(podName)) {\n      this.selectedPods.push(podName);\n    }\n\n    this.updateTemplateVariableWithPods();\n  }\n\n  removePodTag(podName) {\n    _.remove(this.selectedPods, p => { return p === podName;});\n    this.updateTemplateVariableWithPods();\n\n    if (this.selectedPods.length === 0) {\n      this.currentPods = [];\n      this.loadTags();\n    }\n  }\n}\n\nPodNavCtrl.templateUrl = 'panels/podNav/partials/pod_nav.html';\n"]}