{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["addNamespace","namespace","addLabels","labels","querystring","_","forEach","value","label","trimEnd","K8sDatasource","instanceSettings","backendSrv","$q","type","url","name","baseApiUrl","datasourceRequest","method","then","response","status","message","title","apiResource","headers","data","error","_get","result","items","length","names","promises","Array","isArray","push","getPod","all","pod"],"mappings":";;;;;;;;;;;;;AA4HA,WAASA,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,WAAOA,YAAY,gBAAgBA,SAAhB,GAA4B,GAAxC,GAA8C,EAArD;AACD;;AAED,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,QAAIC,cAAc,EAAlB;AACAC,MAAEC,OAAF,CAAUH,MAAV,EAAkB,UAACI,KAAD,EAAQC,KAAR,EAAkB;AAClCJ,qBAAeI,QAAQ,KAAR,GAAgBD,KAAhB,GAAwB,KAAvC;AACD,KAFD;AAGA,WAAOF,EAAEI,OAAF,CAAUL,WAAV,EAAuB,KAAvB,CAAP;AACD;;;AAtIMC,O;;;;;;;;;;;;;;;;;;;;;+BAEMK,a;AACX,+BAAYC,gBAAZ,EAA8BC,UAA9B,EAA0CC,EAA1C,EAA8C;AAAA;;AAC5C,eAAKC,IAAL,GAAYH,iBAAiBG,IAA7B;AACA,eAAKC,GAAL,GAAWJ,iBAAiBI,GAA5B;AACA,eAAKC,IAAL,GAAYL,iBAAiBK,IAA7B;AACA,eAAKJ,UAAL,GAAkBA,UAAlB;AACA,eAAKC,EAAL,GAAUA,EAAV;;AAEA,eAAKI,UAAL,GAAkB,UAAlB;AACD;;;;2CAEgB;AACf,mBAAO,KAAKL,UAAL,CAAgBM,iBAAhB,CAAkC;AACvCH,mBAAK,KAAKA,GAAL,GAAW,GADuB;AAEvCI,sBAAQ;AAF+B,aAAlC,EAGJC,IAHI,CAGC,oBAAY;AAClB,kBAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;+BAEIC,W,EAAa;AAChB,mBAAO,KAAKb,UAAL,CAAgBM,iBAAhB,CAAkC;AACvCH,mBAAK,KAAKA,GAAL,GAAWU,WADuB;AAEvCN,sBAAQ,KAF+B;AAGvCO,uBAAS,EAAE,gBAAgB,kBAAlB;AAH8B,aAAlC,EAIJN,IAJI,CAKL,oBAAY;AACV,qBAAOC,SAASM,IAAhB;AACD,aAPI,EAOF,iBAAS;AACV,qBAAOC,KAAP;AACD,aATI,CAAP;AAUD;;;qCAEU;AACT,mBAAO,KAAKC,IAAL,CAAU,eAAV,EACJT,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;kCAEOf,I,EAAM;AACZ,mBAAO,KAAKa,IAAL,CAAU,mBAAmBb,IAA7B,CAAP;AACD;;;0CAEe;AACd,mBAAO,KAAKa,IAAL,CAAU,oBAAV,EACJT,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;iDAEsB;AACrB,mBAAO,KAAKF,IAAL,CAAU,2BAAV,EACJT,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;wCAEa9B,S,EAAW;AACvB,mBAAO,KAAK4B,IAAL,CAAU,8BAA8B7B,aAAaC,SAAb,CAA9B,GAAwD,YAAlE,EACJmB,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;oDAEyB9B,S,EAAW;AACnC,mBAAO,KAAK4B,IAAL,CAAU,aAAa7B,aAAaC,SAAb,CAAb,GAAuC,wBAAjD,EACJmB,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;yCAEc9B,S,EAAW;AACxB,mBAAO,KAAK4B,IAAL,CAAU,8BAA8B7B,aAAaC,SAAb,CAA9B,GAAwD,aAAlE,EACJmB,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;kCAEO9B,S,EAAW;AACjB,mBAAO,KAAK4B,IAAL,CAAU,aAAa7B,aAAaC,SAAb,CAAb,GAAuC,MAAjD,EACJmB,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;yCAEc9B,S,EAAWE,M,EAAQ;AAChC,mBAAO,KAAK0B,IAAL,CAAU,aAAa7B,aAAaC,SAAb,CAAb,GAAuC,qBAAvC,GAA+DC,UAAUC,MAAV,CAAzE,EACJiB,IADI,CACC,kBAAU;AACd,qBAAOU,OAAOC,KAAd;AACD,aAHI,CAAP;AAID;;;iCAEMf,I,EAAM;AACX,mBAAO,KAAKa,IAAL,CAAU,iDAAiDb,IAA3D,EACNI,IADM,CACD,kBAAU;AACd,kBAAIU,OAAOC,KAAP,IAAgBD,OAAOC,KAAP,CAAaC,MAAb,KAAwB,CAA5C,EAA+C;AAC7C,uBAAOF,OAAOC,KAAP,CAAa,CAAb,CAAP;AACD,eAFD,MAEO;AACL,uBAAOD,OAAOC,KAAd;AACD;AACF,aAPM,CAAP;AAQD;;;wCAEaE,K,EAAO;AAAA;;AACnB,gBAAMC,WAAW,EAAjB;AACA,gBAAIC,MAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxB5B,gBAAEC,OAAF,CAAU2B,KAAV,EAAiB,gBAAQ;AACvBC,yBAASG,IAAT,CAAc,MAAKC,MAAL,CAAYtB,IAAZ,CAAd;AACD,eAFD;AAGA,qBAAO,KAAKH,EAAL,CAAQ0B,GAAR,CAAYL,QAAZ,CAAP;AACD,aALD,MAKO;AACL,qBAAO,KAAKI,MAAL,CAAYL,KAAZ,EACNb,IADM,CACD,eAAO;AACX,uBAAO,CAACoB,GAAD,CAAP;AACD,eAHM,CAAP;AAID;AACF","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class K8sDatasource {\n  constructor(instanceSettings, backendSrv, $q) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.backendSrv = backendSrv;\n    this.$q = $q;\n\n    this.baseApiUrl = '/api/v1/';\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  _get(apiResource) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + apiResource,\n      method: \"GET\",\n      headers: { 'Content-Type': 'application/json' }\n    }).then(\n      response => {\n        return response.data;\n      }, error => {\n        return error;\n      });\n  }\n\n  getNodes() {\n    return this._get('/api/v1/nodes')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getNode(name) {\n    return this._get('/api/v1/nodes/' + name);\n  }\n\n  getNamespaces() {\n    return this._get('/api/v1/namespaces')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getComponentStatuses() {\n    return this._get('/api/v1/componentstatuses')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getDaemonSets(namespace) {\n    return this._get('/apis/extensions/v1beta1/' + addNamespace(namespace) + 'daemonsets')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getReplicationControllers(namespace) {\n    return this._get('/api/v1/' + addNamespace(namespace) + 'replicationcontrollers')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getDeployments(namespace) {\n    return this._get('/apis/extensions/v1beta1/' + addNamespace(namespace) + 'deployments')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getPods(namespace) {\n    return this._get('/api/v1/' + addNamespace(namespace) + 'pods')\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getPodsByLabel(namespace, labels) {\n    return this._get('/api/v1/' + addNamespace(namespace) + 'pods?labelSelector=' + addLabels(labels))\n      .then(result => {\n        return result.items;\n      });\n  }\n\n  getPod(name) {\n    return this._get('/api/v1/pods/?fieldSelector=metadata.name%3D' + name)\n    .then(result => {\n      if (result.items && result.items.length === 1) {\n        return result.items[0];\n      } else {\n        return result.items;\n      }\n    });\n  }\n\n  getPodsByName(names) {\n    const promises = [];\n    if (Array.isArray(names)) {\n      _.forEach(names, name => {\n        promises.push(this.getPod(name));\n      });\n      return this.$q.all(promises);\n    } else {\n      return this.getPod(names)\n      .then(pod => {\n        return [pod];\n      });\n    }\n  }\n}\n\nfunction addNamespace(namespace) {\n  return namespace ? 'namespaces/' + namespace + '/' : '';\n}\n\nfunction addLabels(labels) {\n  let querystring = '';\n  _.forEach(labels, (value, label) => {\n    querystring += label + '%3D' + value + '%2C';\n  });\n  return _.trimEnd(querystring, '%2C');\n}\n"]}